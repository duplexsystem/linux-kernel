# This is a basic workflow to help you get started with Actions

name: ci

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2
      
      - name: setup ci
        run: |
         git config --global user.email "ci@github.com"
         git config --global user.name "Github CI"
         git config --global gc.auto 0
         
      - name: get kernel version
        run: echo "::set-output name=version::$(cat "./patch.sh" | grep BRANCH= | cut -d '=' -f2)" 
        id: kernel
         
      - name: pull gradle cache
        uses: actions/cache@v2
        with:
          path: ./linux
          key: ${{ steps.kernel.outputs.version }}
      
      - name: patch
        run: ./patch.sh
        
      - name: tar
        run: tar --exclude='linux/.git' -czvf linux-kernel.tar.gz linux
      
      - name: upload a build artifact
        uses: actions/upload-artifact@v2.2.4
        with:
          name: linux-kernel.tar.gz
          path: linux-kernel.tar.gz
          
      - name: Tag Repo
        uses: richardsimko/update-tag@v1
        with:
          tag_name: latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/github-script@v4
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const { owner, repo } = context.repo
            const { data: { id } } = await github.repos.getLatestRelease({ owner, repo })
            await github.repos.deleteRelease({ owner, repo, release_id: id })
          
      - name: create draft release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: latest
          release_name: latest
          draft: true
          prerelease: false

      - uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./linux-kernel.tar.gz
          asset_name: linux-kernel.tar.gz
          asset_content_type: application/gzip

      - uses: eregon/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ steps.create_release.outputs.id }}
        
